#!/usr/bin/env node

var docopt = require('docopt').docopt;
var path = require('path');
var Godo = require('../lib/index.js');

var doc = 'Usage: godo [-d DIR -t TREE] [options] [TEXT]' +
    '\n' +
    '\nOptions:' +
    '\n  -d DIR, --tree-dir=DIR    The directory where to store tree(s) (file[s]) [default: .].' +
    '\n  -t TREE, --tree=TREE      The name of the tree (file) to make changes to [default: todo.txt].' +
    '\n  -l, --list                List tree leafs (tasks) nicely.' +
    '\n  -e HASH, --edit=HASH      Edit a tree leaf (task).' +
    '\n  -f HASH, --finish=HASH    Finished a task, delete leaf in tree.' +
    '\n  -p HASH, --parent=HASH    Parent leaf of leaf.';
var cli = docopt(doc, {help: true, version: '0.0.0'});

var cliTreeDir = cli['--tree-dir'];
var cliTreeFile = cli['--tree'];
var cliTreePath = path.join(cliTreeDir, cliTreeFile);
var cliList_ = cli['--list'];
var cliEdit_ = cli['--edit'];
var cliFinish_ = cli['--finish'];
var cliParent = cli['--parent'];
var cliTEXT = cli['TEXT'];


if (cliTEXT) {
	console.log('test');
	Godo.newTask(cliTEXT, cliTreePath);

	return;
}

if (cliEdit_) {
	console.log('Edit');

	return;
}

if (cliFinish_) {
	read(cliTreePath, function(err, data){
		var tasks = removeTask(cliFinish_, data).join('\n');
		write(cliTreePath, tasks, function(){});
	});

	return;
}

if (cliList_ || !cliEdit_ && !cliFinish_ && !cliTEXT) {
	read(cliTreePath, function(err, data){
		var objsArr = fileToObjsArr(data);
		listTasks(objsArr);
	});

	return;
}

